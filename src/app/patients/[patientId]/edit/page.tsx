"use client";\n\nimport { FC, useEffect, useState } from \'react\';\nimport { useRouter } from \'next/navigation\';\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \'lucide-react\';\nimport PatientForm from \'@/components/PatientForm\';\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Patient } from \'@/lib/schema\';\nimport { patientService } from \'@/lib/services/patientService\';\n\ninterface EditPatientPageProps {\n  params: {\n    patientId: string; // Changed from id to patientId\n  };\n}\n\nconst EditPatientPage: FC<EditPatientPageProps> = ({ params }) => {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [patient, setPatient] = useState<Patient | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadPatient = async () => {\n      try {\n        // Use params.patientId instead of params.id\n        const data = await patientService.getPatientById(params.patientId);\n        if (!data) {\n          toast({\n            title: \"Error\",\n            description: \"Paciente no encontrado.\",\n            variant: \"destructive\",\n          });\n          // Consider navigating to the patient list or a 404 page\n          router.push(\'/patients\'); \n          return;\n        }\n        setPatient(data);\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Error al cargar los datos del paciente.\",\n          variant: \"destructive\",\n        });\n        // Consider navigating to the patient list or an error page\n        router.push(\'/patients\');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadPatient();\n  }, [params.patientId, router, toast]); // Changed dependency to params.patientId\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto py-6\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!patient) {\n    return null;\n  }\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"outline\"\n          onClick={() => router.back()}\n          className=\"flex items-center gap-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Volver\n        </Button>\n        <h1 className=\"text-2xl font-bold\">Editar Paciente</h1>\n      </div>\n\n      <div className=\"max-w-2xl mx-auto\">\n        <PatientForm\n          initialData={patient}\n          onClose={() => router.back()}\n          onSubmit={async (data: Partial<Patient>) => {\n            try {\n              // Use params.patientId instead of params.id\n              await patientService.updatePatient(params.patientId, data);\n              toast({\n                title: \"Paciente Actualizado\",\n                description: \"Registro del paciente actualizado exitosamente.\",\n              });\n              // Consider navigating back to the patient details page or list\n              router.push(\`/patients/${params.patientId}\`);\n            } catch (error) {\n              toast({\n                title: \"Error\",\n                description: \"OcurriÃ³ un error al actualizar el paciente.\",\n                variant: \"destructive\",\n              });\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default EditPatientPage; 